name: Build

on:
  push:
    branches: [ master ]
  pull_request: 
  release:
    types: [ published ]

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true

  BUILD_ARTIFACT_PATH: ${{github.workspace}}/build-artifacts

jobs:

  version:
    name: Identify build version
    runs-on: ubuntu-latest
    outputs:
      BuildVersion: ${{env.BUILD_VERSION}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Fetch all Git tags
      run: git fetch --prune --unshallow --tags
    - name: Get current commit hash
      id: commitHash
      run: git rev-parse HEAD
      outputs:
        sha:
    #- name: Get PR Number
    #  run: ./.github/actions/prnumber.ps1
    #  shell: pwsh
    - name: Get PR number
      uses: jwalton/gh-find-current-pr@v1
      id: findPr
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        sha: ${{steps.commitHash.outputs.sha}}
    - name: Debug PR number
      run: echo "$PR_NUMBER"
    - name: Configure build version
      run: ./.github/actions/buildversion.ps1
      shell: pwsh
    - name: Print build version
      run: echo ${{env.BUILD_VERSION}}


  build:
    name: Build ${{matrix.os}}
    runs-on: ${{matrix.os}}
    needs: version
    env:
      BUILD_VERSION: ${{needs.version.outputs.BuildVersion}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
#        mongodb: [3.6]
    steps:
    - name: Start MongoDB (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo systemctl start mongod
    - name: Start MongoDB (MacOS)
      if: matrix.os == 'macOS-latest'
      run: brew services start mongodb-community

    - name: Checkout
      uses: actions/checkout@v2

#    - name: Setup MongoDB (MacOS)
#      if: matrix.os == 'macOS-latest'
#      run: |
#        brew tap mongodb/brew | 
#        brew install mongodb-community@${{matrix.mongodb}} |
#        brew services start mongodb-community@${{matrix.mongodb}}
#    - name: Setup MongoDB (Ubuntu)
#      if: matrix.os == 'ubuntu-latest'
#      run: sudo apt-get install mongodb=${{matrix.mongodb}}.0
#    - name: Setup MongoDB (Windows)
#      if: matrix.os == 'windows-latest'
#      run: choco install mongodb --version=${{matrix.mongodb}}.0

    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build -c Release --no-restore /p:Version=${{env.BUILD_VERSION}}
    - name: Test
      run: dotnet test --logger trx --results-directory ${{env.BUILD_ARTIFACT_PATH}}/coverage --collect "XPlat Code Coverage" --settings CodeCoverage.runsettings
    - name: Pack (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: dotnet pack -c Release --no-build /p:Version=${{env.BUILD_VERSION}} /p:PackageOutputPath=${{env.BUILD_ARTIFACT_PATH}}
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.os}}
        path: ${{env.BUILD_ARTIFACT_PATH}}

  coverage:
    name: Process code coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download coverage reports
      uses: actions/download-artifact@v2
    - name: Install ReportGenerator tool
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    - name: Prepare coverage reports
      run: reportgenerator -reports:*/coverage/*/coverage.cobertura.xml -targetdir:./ -reporttypes:Cobertura
    - name: Upload coverage reports
      uses: codecov/codecov-action@v1.0.13
      with:
        file: Cobertura.xml
        fail_ci_if_error: false

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
    - name: Download build
      uses: actions/download-artifact@v2
      with:
        runs-on: ubuntu-latest
    - run: ls
    # TODO: Do something